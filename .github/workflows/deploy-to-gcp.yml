name: Deploy RetireChat to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

env:
  PROJECT_ID: retirementchat
  SERVICE_NAME: retirechat
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Only run on pushes to main, not on PRs
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for Google Cloud
      run: gcloud auth configure-docker

    - name: Build and Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --source . \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}

    - name: Get Service URL
      id: get-url
      run: |
        URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "url=$URL" >> $GITHUB_OUTPUT

    - name: Display Deployment Info
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 Service URL: ${{ steps.get-url.outputs.url }}"
        echo "📊 View logs: https://console.cloud.google.com/run/detail/${{ env.REGION }}/${{ env.SERVICE_NAME }}"

  test:
    runs-on: ubuntu-latest
    
    # Run tests on PRs and pushes
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test app imports
      run: |
        python -c "import streamlit; import google.generativeai; print('✅ All imports successful')"

    - name: Validate Streamlit config
      run: |
        if [ -f ".streamlit/config.toml" ]; then
          echo "✅ Streamlit config found"
        else
          echo "❌ Streamlit config missing"
          exit 1
        fi 